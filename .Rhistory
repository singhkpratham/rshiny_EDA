version
load("clean_data/uber.Rdata")
cx <- cumsum(x)
x = 1:10
cx <- cumsum(x)
(cx[(n+1):length(x)] - cx[1:(length(x) - n)])
n = 2
(cx[(n+1):length(x)] - cx[1:(length(x) - n)])
(cx[(n+1):length(x)] - cx[1:(length(x) - n)]) / n
cx
x
cx
rsum
(cx[(n+1):length(x)] - cx[1:(length(x) - n)])
data = read.delim("clipboard")
dim(data)
View(data)
sapply(data, function(x)length(which(is.na(x))))
names(data)
cor(data)
str(data)
lm(medv~. , data = data)
mod = lm(medv~. , data = data)
summary(mod)
data[-1]
data = read.delim("clipboard")
data = data[-1]
dim(data)
sapply(data, function(x)length(which(is.na(x))))
names(data)
data = read.delim("clipboard")
dim(data)
names(data)
barplot(crim~medv)
barplot(medv~crim)
plot(medv~crim)
plot(medv~crim, data = data)
barplot(medv~crim, data = data)
cor(medv~crim, data=data)
cor(data$medv~data$crim)
cor(data$medv,data$crim)
barplot(medv~crim, data =data)
plot(medv~crim, data =data)
names(data)
plot(medv~chas, data =data)
barplot(medv~chas, data =data)
barplot(medv,chas, data =data)
barplot(data$medv,data$chas)
barplot(data$chas,data$medv)
table(data$chas)
boxplot(data$chas,data$medv)
t.test(medv~chas, data = data)
t.test(chas~medv, data = data)
t.test(medv~chas, data = data)
tapply(data$medv, data$chas, mean)
hist(data$medv)
t.test(medv~chas, data = data) #fails
cor.test(data$medv,data$crim)
boxplot(data$chas,data$medv)
mean(data$medv[data$chas==0])
mean(data$medv[data$chas==1])
mean(data$medv[data$chas==3])
mean(data$medv[data$chas==2])
predict(lm(medv~crim, data = data))
plot( data$crim , predict(lm(medv~crim, data = data)))
lines(predict(lm(medv~crim, data = data)))
plot( data$crim , data$medv)
lines(data$crim,predict(lm(medv~crim, data = data)))
lines(data$crim,predict(lm(medv~crim, data = data)), col='red')
sapply(data , range)
scale(data)
sapply(scale(data) , range)
shape(scale(data))
dim(scale(data))
class(scale(data))
class(scale(data)[1])
View(as.data.frame(scale(data)[1]))
View(as.data.frame(scale(data)))
summary(mod)
summary(lm(medv~., data = as.data.frame(scale(data))))
boxplot(data$medv)
boxplot(data$medv, data$chas)
boxplot(data$chas)
table(data$chas)
boxplot(data$medv, data$chas)
boxplot(data$medv, as.factor(data$chas))
boxplot(data$medv[data$chas==1])
boxplot(data$medv[data$chas==0])
boxplot(data$medv~ data$chas)
plot(medv~crim, data = data)
summary(mod)
lm(medv~nox+rm+dis+rad+tax+ptratio+b+lstat, data = data)
mod2 = lm(medv~nox+rm+dis+rad+tax+ptratio+b+lstat, data = data)
summary(mod)
summary(mod2)
data[ , ]
sample(10,10)
nrow(data)
row = nrow(data)
sample(.9*row, row)
sample(row,.9*row)
data1 = data[sample(row,.9*row) , ]
mod = lm(medv~. , data = data1)
mod2 = lm(medv~nox+rm+dis+rad+tax+ptratio+b+lstat, data = data1)
summary(mod)
a = sample(row,.9*row)
a = sample(row,.9*row)
train = data[a , ]
test = data[-a,]
mod = lm(medv~. , data = train)
mod2 = lm(medv~nox+rm+dis+rad+tax+ptratio+b+lstat, data = train)
summary(mod)
predict(test)
predict(mod2,test)
as.data.frame(scale(train))
mod = lm(medv~. , data = as.data.frame(scale(train)))
mod2 = lm(medv~nox+rm+dis+rad+tax+ptratio+b+lstat, data = as.data.frame(scale(train)))
mod = lm(medv~. , data = train)
mod2 = lm(medv~nox+rm+dis+rad+tax+ptratio+b+lstat, data = as.data.frame(scale(train)))
summary(mod)
summary(mod2)
mod = lm(medv~. , data = train)
mod2 = lm(medv~nox+rm+dis+rad+tax+ptratio+b+lstat, data = as.data.frame(scale(train)))
summary(mod)
summary(mod2)
predict(mod,test)
plot(test$medv)
lines(1:len(test$medv),predict(mod,test))
lines(1:length(test$medv),predict(mod,test))
abs(-111)
mape = sum(abs(test$medv - predict(mod,test)))
mae = sum(abs(test$medv - predict(mod,test)))
mae = sum(abs(test$medv - predict(mod,test)))/sum(test$medv)
mape = sum(abs(test$medv - predict(mod,test)))/sum(test$medv)
mape
mae
mae = sum(abs(test$medv - predict(mod,test)))
mae
nrow(data)
a = sample(row,.7*row)
train = data[a , ]
test = data[-a,]
mod = lm(medv~. , data = train)
mod2 = lm(medv~nox+rm+dis+rad+tax+ptratio+b+lstat, data = as.data.frame(scale(train)))
summary(mod)
summary(mod2)
predict(mod,test)
plot(test$medv)
lines(1:length(test$medv),predict(mod,test))
mae = sum(abs(test$medv - predict(mod,test)))
mape = sum(abs(test$medv - predict(mod,test)))/sum(test$medv)
dim(train)
dim(test)
mae
mape
rowMeans(abs((test$medv-predict(mod,test))/test$medv) * 100)
abs((test$medv-predict(mod,test))/test$medv) * 100
sum(abs(test$medv - predict(mod,test))/sum(test$medv))
sum(abs(test$medv - predict(mod,test))/sum(test$medv))*100/length(test$medv)
sum(abs(test$medv - predict(mod,test))/sum(test$medv))*100/length(test$medv)
mape=mean(abs(predict(mod,test)-test$medv)/test$medv)
mape
t.test(medv~chas, data = data)
summary(mod)
length(mod$residuals)
dim(train)
length(mod2$residuals)
summary(mod)
summary(mod2)
library(rpart)
?rpart
library(randomForest)
install.packages("randomForest")
library(randomForest)
install.packages("XGBoost")
install.packages("xgboost")
ls()
sample(2, nrow(train), replace=T, prob=c(0.60,0.40))
sample(3, nrow(train), replace=T, prob=c(0.60,0.40))
sample(3, nrow(train), replace=T, prob=c(0.60,0.40,.2))
sample(3, nrow(train), replace=T, prob=c(0.60,0.40,1))
sample(2, nrow(train), replace=T, prob=c(0.60,0.40))
N = 100
x = runif(N) - 0.5
d = data.frame(x=x, y=x^3 + 0.01*rnorm(N))
plot(d)
N = 100
x = runif(N) - 0.5
d = data.frame(x=x, y=x^3 + 0.01*rnorm(N))
mod_d = lm(y~x, data=d)
d$pred_y = predict(mod_d, newdata=d)
d$model = "biased"
d
plot(d$y)
lines(d$pred_y)
g = data.frame(x=x, y=0.1*x+0.01*rnorm(N))
mod_g = lm(y~x, data=g)
g$pred_y = predict(mod_g, newdata=g)
g$model = "unbiased"
perf = rbind(d[, c("y", "pred_y", "model")], g[, c("y", "pred_y", "model")])
ggplot(perf, aes(x=pred_y, y=pred_y-y)) +
geom_point() + geom_abline(slope=0, color="blue") +
scale_x_continuous("predicted outcome") + scale_y_continuous("predicted - true outcome") +
facet_wrap(~model)
library(ggplot2)
ggplot(perf, aes(x=pred_y, y=pred_y-y)) +
geom_point() + geom_abline(slope=0, color="blue") +
scale_x_continuous("predicted outcome") + scale_y_continuous("predicted - true outcome") +
facet_wrap(~model)
ggplot(perf, aes(x=pred_y, y=pred_y-y)) +
geom_point() + geom_abline(slope=0, color="blue") +
#scale_x_continuous("predicted outcome") + scale_y_continuous("predicted - true outcome") +
facet_wrap(~model)
ggplot(perf, aes(x=pred_y, y=pred_y-y)) +
geom_point() + geom_abline(slope=0, color="blue") +
scale_x_continuous("predicted outcome") + scale_y_continuous("predicted - true outcome") +
facet_wrap(~model)
library(rattle)
library(rpart)
install.packages('rattle')
install.packages(rpart.plot)
getwd()
setwd('C:\\Users\\kumar.singh\\Desktop\\New folder\\Git\\Shiny')
test = read.csv("test.csv")
train  = read.csv("train.csv")
rpart(Survived~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data =train, method ='class')
library(rpart)
rpart(Survived~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data =train, method ='class')
my_tree_two <- rpart(Survived~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data =train, method ='class')
library(rattle)
fancyRpartPlot(my_tree_two)
install.packages('rpart.plot')
library(rpart.plot)
fancyRpartPlot(my_tree_two)
plot(my_tree_two)
fancyRpartPlot(my_tree_two)
predict(my_tree_two, test)
head(test)
table(train$Embarked)
predict(my_tree_two, test, type='class')
predict(my_tree_two, test, type='class')
library(randomForest)
names(train)
randomForest(Survived~Age+Sex, data=train)
sapply(train, function(x)length(which(is.na(x))))
randomForest(Survived~Parch+Sex, data=train)
randomForest(as.factor(Survived)~Parch+Sex, data=train)
?randomForest
randomForest(as.factor(Survived)~Parch+Sex, data=train, ntree=30)
1/.632
randomForest(~Parch+Sex, data=train, ntree=30)
table(train$Embarked)
prop.table(table(train$Embarked))
prop.table((train$Embarked))
plot(randomForest(~Parch+Sex, data=train, ntree=30))
plot(randomForest(Survived~Parch+Sex, data=train, ntree=30))
varImpPlot(randomForest(Survived~Parch+Sex, data=train, ntree=30))
